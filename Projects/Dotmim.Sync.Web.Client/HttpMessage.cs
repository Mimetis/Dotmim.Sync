using Dotmim.Sync.Batch;
using Dotmim.Sync.Builders;
using Dotmim.Sync.Data.Surrogate;
using System;
using System.Collections.Generic;
using System.Text;
using Dotmim.Sync.Data;
using Dotmim.Sync.Enumerations;
using Dotmim.Sync.Filter;
using Dotmim.Sync.Messages;
using System.Runtime.Serialization;

namespace Dotmim.Sync.Web.Client
{
    [DataContract]
    public class HttpMessageSendChangesResponse
    {

        public HttpMessageSendChangesResponse()
        {

        }

        public HttpMessageSendChangesResponse(SyncContext context) 
            => this.SyncContext = context ?? throw new ArgumentNullException(nameof(context));

        /// <summary>
        /// Gets or Sets the Server HttpStep
        /// </summary>
        [DataMember(Name="ss")]

        public HttpStep ServerStep { get; set; }

        /// <summary>
        /// Gets or Sets the SyncContext
        /// </summary>
        [DataMember(Name = "sc")]
        public SyncContext SyncContext { get; set; }

        /// <summary>
        /// Gets the current batch index, send from the server 
        /// </summary>
        [DataMember(Name = "bi")]
        public int BatchIndex { get; set; }

        /// <summary>
        /// Gets or Sets if this is the last Batch send from the server 
        /// </summary>
        [DataMember(Name = "ilb")]
        public bool IsLastBatch { get; set; }

        /// <summary>
        /// The remote client timestamp generated by the server database
        /// </summary>
        [DataMember(Name = "rct")]
        public long RemoteClientTimestamp { get; set; }

        /// <summary>
        /// Gets the BatchParInfo send from the server 
        /// </summary>
        [DataMember(Name = "c")]
        public ContainerSet Changes { get; set; }

        /// <summary>
        /// Gets the changes applied stats from the server
        /// </summary>
        [DataMember(Name = "cs")]
        public DatabaseChangesSelected ChangesSelected { get; set; }

        /// <summary>
        /// Gets or Sets the conflict resolution policy from the server
        /// </summary>

        [DataMember(Name = "crp")]
        public ConflictResolutionPolicy ConflictResolutionPolicy { get; set; }


    }

    [DataContract]
    public class HttpMessageGetMoreChangesRequest
    {
        public HttpMessageGetMoreChangesRequest()
        {

        }

        public HttpMessageGetMoreChangesRequest(SyncContext context, int batchIndexRequested)
        {
            this.BatchIndexRequested = batchIndexRequested;
            this.SyncContext = context ?? throw new ArgumentNullException(nameof(context));

        }
        [DataMember]
        public SyncContext SyncContext { get; set; }

        [DataMember]
        public int BatchIndexRequested { get; set; }
    }

    [DataContract]
    public class HttpMessageSendChangesRequest
    {
        public HttpMessageSendChangesRequest()
        {

        }

        public HttpMessageSendChangesRequest(SyncContext context, ScopeInfo scope)
        {
            this.SyncContext = context ?? throw new ArgumentNullException(nameof(context));
            this.Scope = scope ?? throw new ArgumentNullException(nameof(scope));
        }

        [DataMember]
        public SyncContext SyncContext { get; set; }

        /// <summary>
        /// Gets or Sets the reference scope for local repository, stored on server
        /// </summary>
        [DataMember]
        public ScopeInfo Scope { get; set; }

        /// <summary>
        /// Get the current batch index (if InMemory == false)
        /// </summary>
        [DataMember]
        public int BatchIndex { get; set; }

        /// <summary>
        /// Gets or Sets if this is the last Batch to sent to server 
        /// </summary>
        [DataMember]
        public bool IsLastBatch { get; set; }

        /// <summary>
        /// Changes to send
        /// </summary>
        [DataMember]
        public ContainerSet Changes { get; set; }
    }

    [DataContract]
    public class HttpMessageEnsureScopesResponse
    {
        public HttpMessageEnsureScopesResponse()
        {

        }
        public HttpMessageEnsureScopesResponse(SyncContext context, SyncSet schema)
        {
            this.SyncContext = context ?? throw new ArgumentNullException(nameof(context));
            this.Schema = schema ?? throw new ArgumentNullException(nameof(schema));
        }

        [DataMember]
        public SyncContext SyncContext { get; set; }

        /// <summary>
        /// Gets or Sets the schema option (without schema itself, that is not serializable)
        /// </summary>
        [DataMember]
        public SyncSet Schema { get; set; }
    }

    [DataContract]
    public class HttpMessageEnsureScopesRequest
    {
        public HttpMessageEnsureScopesRequest() { }

        /// <summary>
        /// Create a new message to web remote server.
        /// Scope info table name is not provided since we do not care about it on the server side
        /// </summary>
        public HttpMessageEnsureScopesRequest(SyncContext context, string scopeName)
        {
            this.SyncContext = context ?? throw new ArgumentNullException(nameof(context));
            this.ScopeName = scopeName ?? throw new ArgumentNullException(nameof(scopeName));
        }

        [DataMember]
        public SyncContext SyncContext { get; set; }

        /// <summary>
        /// Gets or Sets the scope name
        /// </summary>
        [DataMember]
        public string ScopeName { get; set; }
    }
}
