jobs:
  - template: azure-pipelines-template.yml
    parameters:
      displayName: "Unit tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.UnitTests"
      docker: "none"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Interceptors tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerUnit"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Local Orchestrators tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerUnitLocalOrchestratorTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Local Orchestrators tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingUnitLocalOrchestratorTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerTcp"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingTcpTests"
      docker: "sqlserver"
      
  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Tcp Filters .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerTcpFilterTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Tcp Filters .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingTcpFilterTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Http .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerHttp"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Http .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingHttp"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerConflictTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingConflictTests"
      docker: "sqlserver"

  - job: testbasics
    displayName: "Tests Basics"

    pool:
      # get an Ubuntu image to be able to get the light SQL container
      vmImage: "ubuntu-latest" # "Ubuntu 16.04" # "ubuntu-latest" # 'VS2017-Win2016'

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"
      AZUREDEV: "true"

    steps:
      - script: printenv
        displayName: Get env variables

      - task: UseDotNet@2
        displayName: "Use .Net Core 3.1"
        inputs:
          version: 3.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 6.x"
        inputs:
          packageType: "sdk"
          version: 6.0.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 8.x"
        inputs:
          packageType: "sdk"
          version: 8.0.x

      - script: docker run --name sqlserver -e ACCEPT_EULA=Y -e SA_PASSWORD=Password12! -p 1433:1433 -d mcr.microsoft.com/mssql/server
        displayName: "Run SQL Server latest on Linux container"

      - script: dotnet build Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj
        displayName: 'Build test project'

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.StandAlone --logger trx --no-build
        name: standalonetests
        displayName: "Standalone Tests"
        env:
          "AZUREDEV": "true"

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.UnitTests --logger trx --no-build
        name: unittests
        displayName: "Unit Tests"
        env:
          "AZUREDEV": "true"

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"
        condition: succeededOrFailed()
