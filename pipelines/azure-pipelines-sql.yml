jobs:
  - template: azure-pipelines-template.yml
    parameters:
      displayName: "Unit tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.UnitTests"
      docker: "none"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Interceptors tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerUnit"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Local Orchestrators tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerUnitLocalOrchestratorTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Local Orchestrators tests"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingUnitLocalOrchestratorTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerTcp"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingTcp"
      docker: "sqlserver"

      
  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Tcp Filters .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerTcpFilterTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Tcp Filters .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingTcpFilterTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Http .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerHttp"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Http .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingHttp"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerConflictTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "SQL Server Change Tracking Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.SqlServerChangeTrackingConflictTests"
      docker: "sqlserver"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "PostgreSQL Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.PostgresTcp"
      docker: "postgres"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "PostgreSQL Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.PostgresConflictTests"
      docker: "postgres"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MySQL Tcp .net core 3.1"
      dotnetfx: "netcoreapp3.1"
      filter: "Dotmim.Sync.Tests.MySqlTcp"
      docker: "mysql"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MySQL Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MySqlTcp"
      docker: "mysql"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MySQL Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MySqlConflictTests"
      docker: "mysql"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MySQL Conflicts .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MySqlConflictTests"
      docker: "mysql"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MariaDB Tcp .net core 3.1"
      dotnetfx: "netcoreapp3.1"
      filter: "Dotmim.Sync.Tests.MariaDBTcp"
      docker: "mariadb"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MariaDB Tcp .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MariaDBTcp"
      docker: "mariadb"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MariaDB Fiter Tests .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MariaDBTcpFilterTests"
      docker: "mariadb"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MariaDB Http Tests .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MariaDBHttpTests"
      docker: "mariadb"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "MySQL Http .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.MySqlHttp"
      docker: "mysql"

  - template: azure-pipelines-template.yml
    parameters:
      displayName: "Postgres Http .net 8.0"
      dotnetfx: "net8.0"
      filter: "Dotmim.Sync.Tests.PostgresHttp"
      docker: "postgres"

  - job: testbasics
    displayName: "Tests Basics"

    pool:
      # get an Ubuntu image to be able to get the light SQL container
      vmImage: "ubuntu-latest" # "Ubuntu 16.04" # "ubuntu-latest" # 'VS2017-Win2016'

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"
      AZUREDEV: "true"

    steps:
      - script: printenv
        displayName: Get env variables

      - task: UseDotNet@2
        displayName: "Use .Net Core 3.1"
        inputs:
          version: 3.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 6.x"
        inputs:
          packageType: "sdk"
          version: 6.0.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 8.x"
        inputs:
          packageType: "sdk"
          version: 8.0.x

      - script: docker run --name sqlserver -e ACCEPT_EULA=Y -e SA_PASSWORD=Password12! -p 1433:1433 -d mcr.microsoft.com/mssql/server
        displayName: "Run SQL Server latest on Linux container"

      - script: dotnet build Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj
        displayName: 'Build test project'

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.StandAlone --logger trx --no-build
        name: standalonetests
        displayName: "Standalone Tests"
        continueOnError: true
        env:
          "AZUREDEV": "true"

      - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --filter Dotmim.Sync.Tests.UnitTests --logger trx --no-build
        name: unittests
        displayName: "Unit Tests"
        continueOnError: true
        env:
          "AZUREDEV": "true"

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"

  - job: Beta
    displayName: "Beta Nuget Packages"

    # dependsOn: Tests
    # condition: succeeded('Tests')

    pool:
      vmImage: "ubuntu-latest"

    variables:
      buildConfiguration: "Release"
      buildBetaId: "beta-"
      artifactName: "drop"

    steps:
      - task: UseDotNet@2
        displayName: "Use .Net Core 3.1"
        inputs:
          version: 3.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 6.x"
        inputs:
          packageType: "sdk"
          version: 6.0.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 8.x"
        inputs:
          packageType: "sdk"
          version: 8.0.x

      - bash: |
          build=$(Build.BuildId)
          lenbuild=${#build}
          if [ $lenbuild -eq 1 ]; then
            build="000$build"
          elif [ $lenbuild -eq 2 ]; then
            build="00$build"
          elif [ $lenbuild -eq 3 ]; then
            build="0$build"
          fi
          echo "##vso[task.setvariable variable=buildBetaId]$(buildBetaId)$build"

      - script: |
          echo $(buildIdString)
          echo $(buildBetaId)
          dotnet --version
          dotnet --info
        displayName: Get dotnet version

      - script: |
          dotnet restore
        displayName: "dotnet restore"
      - script: |
          dotnet build Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Core --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.Core"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServer  --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.SqlServer"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.SqlServer.ChangeTracking/Dotmim.Sync.SqlServer.ChangeTracking.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.SqlServer.ChangeTracking/Dotmim.Sync.SqlServer.ChangeTracking.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServerChangeTracking  --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.SqlServerChangeTracking"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MySql --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.MySql"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.MariaDB/Dotmim.Sync.MariaDB.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.MariaDB/Dotmim.Sync.MariaDB.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MariaDB --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.MariaDB"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Sqlite --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.Sqlite"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.PostgreSql/Dotmim.Sync.PostgreSql.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.PostgreSql/Dotmim.Sync.PostgreSql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.PostgreSql --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.PostgreSql"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Client --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.Web.Client"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) --version-suffix $(buildBetaId) --no-restore
          dotnet pack Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Server --version-suffix $(buildBetaId)
        displayName: "beta nuget Dotmim.Sync.Web.Server"
        continueOnError: true

      # Publish Build Artifacts
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: $(artifactName)

  - job: Release
    displayName: "Release Nuget Packages"

    # dependsOn: Tests
    # condition: succeeded('Tests')

    pool:
      vmImage: "ubuntu-latest"

    variables:
      buildConfiguration: "Release"
      artifactName: "release"

    steps:
      - script: mkdir -p $(Pipeline.Workspace)/.nuget/packages
        displayName: 'Ensure NuGet packages directory exists'

      - task: Cache@2
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(Pipeline.Workspace)/.nuget/packages
          cacheHitVar: 'CACHE_RESTORED'
        displayName: Cache NuGet packages

      - task: UseDotNet@2
        displayName: "Use .Net Core sdk"
        inputs:
          version: 3.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 6.x"
        inputs:
          packageType: "sdk"
          version: 6.0.x

      - task: UseDotNet@2
        displayName: "Use .Net Sdk 8.x"
        inputs:
          packageType: "sdk"
          version: 8.0.x

      - script: |
          dotnet restore
        displayName: "dotnet restore"
      - script: |
          dotnet build Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Core --no-build
        displayName: "release nuget Dotmim.Sync.Core"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServer --no-build
        displayName: "release nuget Dotmim.Sync.SqlServer"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.SqlServer.ChangeTracking/Dotmim.Sync.SqlServer.ChangeTracking.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.SqlServer.ChangeTracking/Dotmim.Sync.SqlServer.ChangeTracking.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServerChangeTracking --no-build
        displayName: "release nuget Dotmim.Sync.SqlServerChangeTracking"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MySql --no-build
        displayName: "release nuget Dotmim.Sync.MySql"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.MariaDB/Dotmim.Sync.MariaDB.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.MariaDB/Dotmim.Sync.MariaDB.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MariaDB --no-build
        displayName: "release nuget Dotmim.Sync.MariaDB"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Sqlite --no-build
        displayName: "release nuget Dotmim.Sync.Sqlite"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.PostgreSql/Dotmim.Sync.PostgreSql.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.PostgreSql/Dotmim.Sync.PostgreSql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.PostgreSql --no-build
        displayName: "beta nuget Dotmim.Sync.PostgreSql"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Client --no-build
        displayName: "release nuget Dotmim.Sync.Web.Client"
        continueOnError: true
      - script: |
          dotnet build Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) --no-restore
          dotnet pack Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Server --no-build
        displayName: "release nuget Dotmim.Sync.Web.Server"
        continueOnError: true

      # Publish Build Artifacts
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: $(artifactName)
